sample(nrow(data),size=1,replace=TRUE)
print(m1[3186])
print(data[3186])
print(data[3186, ])
sample(nrow(data),size=1,replace=TRUE)
rm(list = ls())
basepath <- 'C:/Users/evanm_000/Documents/GitHub/mixture-models'
setwd(basepath)
data <- read.table("EvanExercise.dat", header=FALSE)
colnames(data) <- 'population'
ggplot(data, aes(x = population)) + geom_density() + xlim(0, 1.1) +theme_minimal() + ggtitle('Overview of population')
#### Setting up the initial values for the Mixture Model
set.seed(737)
m1 <- data[sample(nrow(data),size=1,replace=TRUE),]
print(data[3186, ])
library(MASS)
library(ggplot2)
rm(list = ls())
basepath <- 'C:/Users/evanm_000/Documents/GitHub/mixture-models'
setwd(basepath)
data <- read.table("EvanExercise.dat", header=FALSE)
colnames(data) <- 'population'
ggplot(data, aes(x = population)) + geom_density() + xlim(0, 1.1) +theme_minimal() + ggtitle('Overview of population')
#### Setting up the initial values for the Mixture Model
set.seed(737)
m1 <- data[sample(nrow(data),size=1,replace=FALSE),]
print(m1)
print(data[3186, ])
library(MASS)
library(ggplot2)
rm(list = ls())
basepath <- 'C:/Users/evanm_000/Documents/GitHub/mixture-models'
setwd(basepath)
data <- read.table("EvanExercise.dat", header=FALSE)
colnames(data) <- 'population'
ggplot(data, aes(x = population)) + geom_density() + xlim(0, 1.1) +theme_minimal() + ggtitle('Overview of population')
#### Setting up the initial values for the Mixture Model
set.seed(737)
m1 <- data[sample(nrow(data),size=1,replace=TRUE),]
print(m1)
print(data[3186, ])
row_sample1 <- sample(nrow(data),size=1,replace=TRUE)
row_sample2 <- sample(nrow(data),size=1,replace=TRUE)
library(MASS)
library(ggplot2)
rm(list = ls())
basepath <- 'C:/Users/evanm_000/Documents/GitHub/mixture-models'
setwd(basepath)
data <- read.table("EvanExercise.dat", header=FALSE)
colnames(data) <- 'population'
ggplot(data, aes(x = population)) + geom_density() + xlim(0, 1.1) +theme_minimal() + ggtitle('Overview of population')
#### Setting up the initial values for the Mixture Model
set.seed(737)
row_sample1 <- sample(nrow(data),size=1,replace=TRUE)
row_sample2 <- sample(nrow(data),size=1,replace=TRUE)
print(row_sample1)
print(row_sample2)
library(MASS)
library(ggplot2)
rm(list = ls())
basepath <- 'C:/Users/evanm_000/Documents/GitHub/mixture-models'
setwd(basepath)
data <- read.table("EvanExercise.dat", header=FALSE)
colnames(data) <- 'population'
ggplot(data, aes(x = population)) + geom_density() + xlim(0, 1.1) +theme_minimal() + ggtitle('Overview of population')
#### Setting up the initial values for the Mixture Model
set.seed(737)
row_sample1 <- sample(nrow(data),size=1,replace=TRUE)
row_sample2 <- sample(nrow(data),size=1,replace=TRUE)
m1 <- data[row_sample1,]
print(row_sample1)
print(row_sample2)
library(MASS)
library(ggplot2)
rm(list = ls())
basepath <- 'C:/Users/evanm_000/Documents/GitHub/mixture-models'
setwd(basepath)
data <- read.table("EvanExercise.dat", header=FALSE)
colnames(data) <- 'population'
ggplot(data, aes(x = population)) + geom_density() + xlim(0, 1.1) +theme_minimal() + ggtitle('Overview of population')
#### Setting up the initial values for the Mixture Model
set.seed(737)
row_sample1 <- sample(nrow(data),size=1,replace=TRUE)
row_sample2 <- sample(nrow(data),size=1,replace=TRUE)
m1 <- data[row_sample1,]
print(row_sample1)
print(row_sample2)
m1 <- data[row_sample1,]
m1
library(MASS)
library(ggplot2)
rm(list = ls())
basepath <- 'C:/Users/evanm_000/Documents/GitHub/mixture-models'
setwd(basepath)
data <- read.table("EvanExercise.dat", header=FALSE)
colnames(data) <- 'population'
ggplot(data, aes(x = population)) + geom_density() + xlim(0, 1.1) +theme_minimal() + ggtitle('Overview of population')
#### Setting up the initial values for the Mixture Model
set.seed(737)
row_sample1 <- sample(nrow(data),size=1,replace=TRUE)
row_sample2 <- sample(nrow(data),size=1,replace=TRUE)
m1 <- data[row_sample1, ]
m2 <- data[row_sample2, ]
print(row_sample1)
print(row_sample2)
library(MASS)
library(ggplot2)
rm(list = ls())
basepath <- 'C:/Users/evanm_000/Documents/GitHub/mixture-models'
setwd(basepath)
data <- read.table("EvanExercise.dat", header=FALSE)
colnames(data) <- 'population'
ggplot(data, aes(x = population)) + geom_density() + xlim(0, 1.1) +theme_minimal() + ggtitle('Overview of population')
#### Setting up the initial values for the Mixture Model
set.seed(737)
row_sample1 <- sample(nrow(data),size=1,replace=TRUE)
row_sample2 <- sample(nrow(data),size=1,replace=TRUE)
m1 <- data[row_sample1, ]
m2 <- data[row_sample2, ]
print(row_sample1)
print(row_sample2)
library(MASS)
library(ggplot2)
rm(list = ls())
basepath <- 'C:/Users/evanm_000/Documents/GitHub/mixture-models'
setwd(basepath)
data <- read.table("EvanExercise.dat", header=FALSE)
colnames(data) <- 'population'
ggplot(data, aes(x = population)) + geom_density() + xlim(0, 1.1) +theme_minimal() + ggtitle('Overview of population')
#### Setting up the initial values for the Mixture Model
set.seed(737)
row_sample1 <- sample(nrow(data),size=1,replace=TRUE)
row_sample2 <- sample(nrow(data),size=1,replace=TRUE)
m1 <- data[row_sample1, ]
m2 <- data[row_sample2, ]
print(m1)
print(m2)
library(MASS)
library(ggplot2)
rm(list = ls())
basepath <- 'C:/Users/evanm_000/Documents/GitHub/mixture-models'
setwd(basepath)
data <- read.table("EvanExercise.dat", header=FALSE)
colnames(data) <- 'population'
ggplot(data, aes(x = population)) + geom_density() + xlim(0, 1.1) +theme_minimal() + ggtitle('Overview of population')
#### Setting up the initial values for the Mixture Model
set.seed(737)
row_sample1 <- sample(nrow(data),size=1,replace=TRUE)
row_sample2 <- sample(nrow(data),size=1,replace=TRUE)
m1 <- data[row_sample1, ]
m2 <- data[row_sample2, ]
print(m1)
print(m2)
library(MASS)
library(ggplot2)
rm(list = ls())
basepath <- 'C:/Users/evanm_000/Documents/GitHub/mixture-models'
setwd(basepath)
data <- read.table("EvanExercise.dat", header=FALSE)
colnames(data) <- 'population'
ggplot(data, aes(x = population)) + geom_density() + xlim(0, 1.1) +theme_minimal() + ggtitle('Overview of population')
#### Setting up the initial values for the Mixture Model
set.seed(737)
row_sample1 <- sample(nrow(data),size=1,replace=TRUE)
row_sample2 <- sample(nrow(data),size=1,replace=TRUE)
m1 <- data[row_sample1, ]
m2 <- data[row_sample2, ]
print(m1)
print(m2)
m1 <- data[row_sample1, ]
m2 <- data[row_sample2, ]
sd1 <- var(data)
sd2 <- var(data)
sd1
sd2
library(MASS)
library(ggplot2)
#### Reading in the data
rm(list = ls())
basepath <- 'C:/Users/evanm_000/Documents/GitHub/mixture-models'
setwd(basepath)
data <- read.table("EvanExercise.dat", header=FALSE)
colnames(data) <- 'population'
#### Getting an overview of what the data looks like
ggplot(data, aes(x = population)) + geom_density() + xlim(0, 1.1) +theme_minimal() + ggtitle('Overview of population')
#### Setting up the initial values for the Mixture Model
set.seed(737)
row_sample1 <- sample(nrow(data),size=1,replace=TRUE)
row_sample2 <- sample(nrow(data),size=1,replace=TRUE)
m1 <- data[row_sample1, ]
m2 <- data[row_sample2, ]
sd1 <- var(data)
sd2 <- var(data)
pi <- 0.5
print(m1)
print(m2)
## avoid spurious accuracy
op <- options(digits = 3)
set.seed(123)
x <- rgamma(100, shape = 5, rate = 0.1)
x
fitdistr(x, "gamma")
ggplot(x)
data.frame(pop = x)
pop <- data.frame(pop = x)
ggplot(pop) + geom_density()
ggplot(pop, aes(x = pop)) + geom_density()
ggplot(pop, aes(x = pop)) + geom_density() + xlim(0, 150)
ggplot(pop, aes(x = pop)) + geom_density() + xlim(-20, 150)
ggplot(pop, aes(x = pop)) + geom_density() + xlim(0, 150)
fitdistr(x, "gamma")
fitdistr(x, dgamma, list(shape = 1, rate = 0.1), lower = 0.001)
set.seed(123)
x2 <- rt(250, df = 9)
fitdistr(x2, "t", df = 9)
fitdistr(x2, "t")
mydt <- function(x, m, s, df) dt((x-m)/s, df)/s
fitdistr(x2, mydt, list(m = 0, s = 1), df = 9, lower = c(-Inf, 0))
set.seed(123)
x3 <- rweibull(100, shape = 4, scale = 100)
fitdistr(x3, "weibull")
set.seed(123)
x4 <- rnegbin(500, mu = 5, theta = 4)
fitdistr(x4, "Negative Binomial")
options(op)
mydt <- function(x, m, s, df) dt((x-m)/s, df)/s
fitdistr(x2, mydt, list(m = 0, s = 1), df = 9, lower = c(-Inf, 0))
set.seed(123)
x3 <- rweibull(100, shape = 4, scale = 100)
fitdistr(x3, "weibull")
set.seed(123)
x4 <- rnegbin(500, mu = 5, theta = 4)
fitdistr(x4, "Negative Binomial")
options(op)
fitdistr(x2, "t")
library(MASS)
library(ggplot2)
#### Reading in the data
rm(list = ls())
basepath <- 'C:/Users/evanm_000/Documents/GitHub/mixture-models'
setwd(basepath)
data <- read.table("EvanExercise.dat", header=FALSE)
colnames(data) <- 'population'
#### Getting an overview of what the data looks like
ggplot(data, aes(x = population)) + geom_density() + xlim(0, 1.1) +theme_minimal() + ggtitle('Overview of population')
#### Setting up the initial values for the Mixture Model
set.seed(737)
#### Initial guesses will just be:
#### mu = random element
#### sd = population variance
#### mixing proportion = 0.5
row_sample_1 <- sample(nrow(data),size=1,replace=TRUE)
row_sample_2 <- sample(nrow(data),size=1,replace=TRUE)
m1 <- data[row_sample1, ]
m2 <- data[row_sample2, ]
sd1 <- var(data)
sd2 <- var(data)
pi <- 0.5
## avoid spurious accuracy
op <- options(digits = 3)
#### Psuedo code
#### 1. Use pi to randomly determine which dist a given sample is from
#### 2. Update mu and sd based on upated sample
#### 3. Use sample to generate distribution from MASS package, save MLE
#### 3.5 This will be done twice for each adjustment of pi as there are two distributions
#### Do we take the higher of the MLE and go with that? For instance if a decrease in pi drove ML up then logic would dictate you
#### should keep doing it until you get a result
#### 4. Iterate until convergence of pi and mu/sd
#### 5. After convergence return the parameters for each of the distributions
library(MASS)
library(ggplot2)
#### Reading in the data
rm(list = ls())
basepath <- 'C:/Users/evanm_000/Documents/GitHub/mixture-models'
setwd(basepath)
data <- read.table("EvanExercise.dat", header=FALSE)
colnames(data) <- 'population'
#### Getting an overview of what the data looks like
ggplot(data, aes(x = population)) + geom_density() + xlim(0, 1.1) +theme_minimal() + ggtitle('Overview of population')
#### Setting up the initial values for the Mixture Model
set.seed(737)
#### Initial guesses will just be:
#### mu = random element
#### sd = population variance
#### mixing proportion = 0.5
row_sample_1 <- sample(nrow(data),size=1,replace=TRUE)
row_sample_2 <- sample(nrow(data),size=1,replace=TRUE)
m1 <- data[row_sample_1, ]
m2 <- data[row_sample_2, ]
sd1 <- var(data)
sd2 <- var(data)
pi <- 0.5
## avoid spurious accuracy
op <- options(digits = 3)
#### Psuedo code
#### 1. Use pi to randomly determine which dist a given sample is from
#### 2. Update mu and sd based on upated sample
#### 3. Use sample to generate distribution from MASS package, save MLE
#### 3.5 This will be done twice for each adjustment of pi as there are two distributions
#### Do we take the higher of the MLE and go with that? For instance if a decrease in pi drove ML up then logic would dictate you
#### should keep doing it until you get a result
#### 4. Iterate until convergence of pi and mu/sd
#### 5. After convergence return the parameters for each of the distributions
initial_params <- c(m1, m2, sd1, sd2, pi)
initial_params[1]
m1
mixture_model <- function(initial_params, data){
### initial_params : a list of variables holding first estimates of mu, sd and pi
### data : the population from which the underlying subpopulations are being investigated
### returns : TBC
pop <- data
return(data)
}
init <- c(m1, m2, sd1, sd2, pi)
mixture_model <- function(initial_params, X){
### initial_params : a list of variables holding first estimates of mu, sd and pi
### data : the population from which the underlying subpopulations are being investigated
### returns : TBC
pop <- X
return(X)
}
mixture_model(init, data)
help(sample)
sample(x, prob = 0.5)
sample(data, prob = 0.5)
sample(data, pi * nrow(data))
sample(data, pi * nrow(data), replace=TRUE)
mixture_model <- function(initial_params, X){
### initial_params : a list of variables holding first estimates of mu, sd and pi
### data : the population from which the underlying subpopulations are being investigated
### returns : TBC
pop <- X
rows <- nrow(X)
elements_1 <- pi * rows
elements_2 <- (1 - pi) * rows
pop1 <- sample(X, elements_1, replace=FALSE)
pop2 <- sample(X, elements_2, replace=FALSE)
return(pop1)
}
pop <- mixture_model(init, data)
mixture_model <- function(initial_params, X){
### initial_params : a list of variables holding first estimates of mu, sd and pi
### data : the population from which the underlying subpopulations are being investigated
### returns : TBC
pop <- X
rows <- nrow(X)
elements_1 <- pi * rows
elements_2 <- (1 - pi) * rows
#pop1 <- sample(X, elements_1, replace=FALSE)
#pop2 <- sample(X, elements_2, replace=FALSE)
return(rows)
}
pop <- mixture_model(init, data)
pop
mixture_model <- function(initial_params, X){
### initial_params : a list of variables holding first estimates of mu, sd and pi
### data : the population from which the underlying subpopulations are being investigated
### returns : TBC
pop <- X
rows <- nrow(X)
elements_1 <- pi * rows
elements_2 <- (1 - pi) * rows
#pop1 <- sample(X, elements_1, replace=FALSE)
#pop2 <- sample(X, elements_2, replace=FALSE)
return(elements_1)
}
pop <- mixture_model(init, data)
print(pop)
mixture_model <- function(initial_params, X){
### initial_params : a list of variables holding first estimates of mu, sd and pi
### data : the population from which the underlying subpopulations are being investigated
### returns : TBC
pop <- X
rows <- nrow(X)
elements_1 <- pi * rows
elements_2 <- (1 - pi) * rows
pop1 <- X[sample(X, elements_1, replace=FALSE), ]
pop2 <- X[sample(X, elements_2, replace=FALSE), ]
return(pop1)
}
pop <- mixture_model(init, data)
nrow(pop)
mixture_model <- function(initial_params, X){
### initial_params : a list of variables holding first estimates of mu, sd and pi
### data : the population from which the underlying subpopulations are being investigated
### returns : TBC
pop <- X
rows <- nrow(X)
elements_1 <- pi * rows
elements_2 <- (1 - pi) * rows
pop1 <- X[sample(X, elements_1, replace=TRUE), ]
pop2 <- X[sample(X, elements_2, replace=TRUE), ]
return(pop1)
}
pop <- mixture_model(init, data)
init
pop <- X
rows <- nrow(X)
rows
mixture_model <- function(initial_params, X){
### initial_params : a list of variables holding first estimates of mu, sd and pi
### data : the population from which the underlying subpopulations are being investigated
### returns : TBC
pop <- X
rows <- nrow(pop)
elements_1 <- pi * rows
elements_2 <- (1 - pi) * rows
pop1 <- pop[sample(pop, elements_1, replace=TRUE), ]
pop2 <- pop[sample(pop, elements_2, replace=TRUE), ]
return(pop1)
}
pop <- mixture_model(init, data)
nrow(pop)
pop <- data
rows <- nrow(X)
elements_1 <- pi * rows
elements_2 <- (1 - pi) * rows
pop1 <- X[sample(X, elements_1, replace=TRUE), ]
pop2 <- X[sample(X, elements_2, replace=TRUE), ]
elements_1 <- pi * rows
elements_2 <- (1 - pi) * rows
pop1 <- pop[sample(pop, elements_1, replace=TRUE), ]
pop1 <- sample(pop, elements_1, replace=TRUE)
elements_1 <- pi * rows
rows <- nrow(pop)
elements_1 <- pi * rows
elements_1
pop1 <- sample(pop, elements_1, replace=TRUE)
pop1 <- sample(pop, elements_1, replace=FALSE)
rows <- nrow(pop)
nrow(pop)
pop
pop1 <- sample(pop, elements_1, replace=FALSE)
pop1 <- sample(pop, elements_1, replace=TRUE)
pop1
pop
head(pop)
pop <- as.matrix(data)
pop
pop1 <- sample(pop, elements_1, replace=TRUE)
pop1
pop1 <- sample(pop, elements_1, replace=FALSE)
pop1
help(intersect)
mixture_model <- function(initial_params, X){
### initial_params : a list of variables holding first estimates of mu, sd and pi
### data : the population from which the underlying subpopulations are being investigated
### returns : TBC
pop <- X
rows <- nrow(pop)
elements_1 <- pi * rows
elements_2 <- (1 - pi) * rows
pop1 <- pop[sample(pop, elements_1, replace=TRUE), ]
pop2 <- setdiff(pop, pop1)
return(pop2)
}
pop <- mixture_model(init, data)
mixture_model <- function(initial_params, X){
### initial_params : a list of variables holding first estimates of mu, sd and pi
### data : the population from which the underlying subpopulations are being investigated
### returns : TBC
pop <- as.matrix(X)
rows <- nrow(pop)
elements_1 <- pi * rows
elements_2 <- (1 - pi) * rows
pop1 <- sample(pop, elements_1, replace=TRUE)
pop2 <- setdiff(pop, pop1)
return(pop2)
}
pop <- mixture_model(init, data)
pop
mixture_model <- function(initial_params, X){
### initial_params : a list of variables holding first estimates of mu, sd and pi
### data : the population from which the underlying subpopulations are being investigated
### returns : TBC
pop <- as.matrix(X)
rows <- nrow(pop)
elements_1 <- pi * rows
elements_2 <- (1 - pi) * rows
pop1 <- sample(pop, elements_1, replace=FALSE)
pop2 <- setdiff(pop, pop1)
return(pop2)
}
pop <- mixture_model(init, data)
pop
nrow(pop)
length(pop)
list(pop1, pop2) <- mixture_model(init, data)
mixture_model <- function(initial_params, X){
### initial_params : a list of variables holding first estimates of mu, sd and pi
### data : the population from which the underlying subpopulations are being investigated
### returns : TBC
pop <- as.matrix(X)
rows <- nrow(pop)
elements_1 <- pi * rows
elements_2 <- (1 - pi) * rows
pop1 <- sample(pop, elements_1, replace=FALSE)
pop2 <- setdiff(pop, pop1)
return(pop1, pop2)
}
list(pop1, pop2) <- mixture_model(init, data)
list[pop1, pop2] <- mixture_model(init, data)
library(MASS)
library(ggplot2)
#### Reading in the data
rm(list = ls())
basepath <- 'C:/Users/evanm_000/Documents/GitHub/mixture-models'
setwd(basepath)
data <- read.table("EvanExercise.dat", header=FALSE)
colnames(data) <- 'population'
#### Getting an overview of what the data looks like
ggplot(data, aes(x = population)) + geom_density() + xlim(0, 1.1) +theme_minimal() + ggtitle('Overview of population')
